## Arithmetic Project
##

smem --set learning on

## John E. Laird 
## Started 7/17/2005
## Last modifications 5/15/2006

## This program supports arithmetic ands subtraction between two multi-digit 
## numbers. It formulates the problem in multiple columns. It does not use any 
## math functions. As currently formulated, it uses a table of all single digit 
## addition facts (for addition and one subtraction strategy) and tables of 
## simple subtraction facts and addition by ten to single digits (for a second 
## subtraction strategy). These facts can be converted to a semantic memory 
## access (in the application of compute-result).
##
## Each primitive operator is relatively simple: without complex proposal 
## conditions, control rules, lots of control flags or complex conditional 
## operator applications. The actual execution trace is sometimes a bit tricky
## especially for subtraction.
##
## The project supports the automatic generation of random 3 column addition and 
## subtraction problems which are created in generate-problem. The project will 
## execute N of these (set as the value of ^count in initialize-arithmetic).

## The project checks that all answers are computed correctly by using Soar's 
## math functions (computed in elaborations/Verify and finish-problem) if an 
## incorrect answer is computed, it is printed out and Soar halts 

## The two subtraction strategies differ in what initial facts they assume. One 
## of the subtraction strategies assumes the same knowledge as addition (the sum 
## of two single digit numbers and the resulting carry), but involves remapping 
## that knowledge so that it is appropriate for subtraction. For example it 
## knows that if 7 is subtracted from 6 that the answer is 9 and there must be a 
## borrow from the column to the left.
##
## The second subtraction strategy assumes that the system knows how to subtract 
## any single digit (0-9) from the numbers 0-18, and that it has facts to add
## ten to any single digit (0-9).
##
## The actual trace of a strategy arises from the available operator 
## applications and impasses that arise. For example, in the second strategy, if 
## a larger number is being subtracted from a smaller number, there is an 
## operator no-change impasse because no fact is available for that situation.
## This is the standard american approach to subtraction. The key rules for this 
## are in process-column/compute-result.soar

## The only differences between the two strategies are the available facts and a 
## single rule in process-column that applies the process-column operator by 
## accessing the facts (process-column*apply*compute-result*subtraction). There 
## are rules that only are used by the second strategy (in the compute-result 
## substate), but there is no explicit control to invoke them and they do not 
## have to be disabled during addition or the other subtraction strategy.

## Works with chunking (chunk always). 

## Key data structures:
##   arithmetic
##     add10-facts - all facts for adding 10 to 0-9
##       digit1 - 0-9
##       digit-10 - digit + 10
##     facts - all of the facts about single digit arithmetic
##       digit1
##       digit2
##       sum - 0-9 - the single digit result 
##       carry-borrow - 0/1 if the result is 10 or greater
##       operation addition/subtraction
##     subtraction-facts - all facts for subtracting a digit from 0-18
##        same structure as facts above
##   arithmetic-problem - holds the complete definition of the problem
##     one-column - the right-most columns where the ones are held
##                  linked-list to rest of columns
##       column t - used to test if column exists - makes chunking happy
##       digit1 0-9
##       digit2 0-9
##       carry-borrow - 0/1 - based on the computation on the prior column
##       next-column - the column to the left of the current - 10x 
##                     (nil if no next column)
##       result - the result of the digits and carry-borrow
##   count - number of problems to solve
##   digits - all digits 0-9

##
## All of the operators in this system:
## Initialize-arithmetic
##   Names the problem (^name arithmetic)
##   Creates the digits 0-9 that are used in generating problems
##   Initialize the count for the number of problems to solve
##   Can also define a specific problem to solve (example rule commented out)
##      If specific problem defined, it will be solved <count> number of times
## Generate-facts
##   Preloads working memory with all of the arithmetic facts (should not be 
##   necessary with semantic memory)
## Generate-problem
##   Creates the arithmetic problem (<s> ^arithmetic-problem) 
##   Generates individual digits, the operation, column by column.
##   Right now it only does addition problems
## Process-column - compute the result for a column
##   get-digit1 - retrieve digit1 from column and move it onto state
##     if there is a carry-borrow, recursively add/subtract it to column digit1 
##         to compute final digit1
##     write-digit1 - return the newly computed digit1 and possible 
##                    carry-borrow(if digit1 is 9 for + or 0 for -)
##   get-digit2 - retrieve digit2 and move it onto the state
##   compute-result - compute result and carry-borrow from digit1 and digit2 by 
##                    using the facts - will replace with semantic memory lookup 
##   carry-borrow - transfer carry-borrow to next column
##     new-column - creates a new column if there is a carry-borrow at the 
##                 left-most column for an addition problem
##   write-result - move result to the current-column
## Next-column - when a result has been computed for a column, 
##               go to the next column
## Finish-problem - when there is a result for a column with no next-column 
##                  (nil), print out result, decrement count
## Stop-arithmetic - if count =0 the halt
##

###
# Semantic database preload
#
# The following sequence of commands adds
# all relevant facts to the semantic store
# as a part of sourcing.  This allows a more
# genuine comparison of semantic memory and
# rule-based retrieval, as the rete gets to
# setup its indexing at rule sourcing anyway.
###

smem --add {
   (<arithmetic> ^facts
                          <a01> <a02> <a03> <a04> <a05> <a06> <a07> <a08> <a09> <a00>
                          <a11> <a12> <a13> <a14> <a15> <a16> <a17> <a18> <a19> <a10>
                          <a21> <a22> <a23> <a24> <a25> <a26> <a27> <a28> <a29> <a20>
                          <a31> <a32> <a33> <a34> <a35> <a36> <a37> <a38> <a39> <a30>
                          <a41> <a42> <a43> <a44> <a45> <a46> <a47> <a48> <a49> <a40>
                          <a51> <a52> <a53> <a54> <a55> <a56> <a57> <a58> <a59> <a50>
                          <a61> <a62> <a63> <a64> <a65> <a66> <a67> <a68> <a69> <a60>
                          <a71> <a72> <a73> <a74> <a75> <a76> <a77> <a78> <a79> <a70>
                          <a81> <a82> <a83> <a84> <a85> <a86> <a87> <a88> <a89> <a80>
                          <a91> <a92> <a93> <a94> <a95> <a96> <a97> <a98> <a99> <a90>)
   (<a00> ^digit1 0 ^digit2 0 ^sum 0 ^carry-borrow 0)
   (<a01> ^digit1 0 ^digit2 1 ^sum 1 ^carry-borrow 0)
   (<a02> ^digit1 0 ^digit2 2 ^sum 2 ^carry-borrow 0)
   (<a03> ^digit1 0 ^digit2 3 ^sum 3 ^carry-borrow 0)
   (<a04> ^digit1 0 ^digit2 4 ^sum 4 ^carry-borrow 0)
   (<a05> ^digit1 0 ^digit2 5 ^sum 5 ^carry-borrow 0)
   (<a06> ^digit1 0 ^digit2 6 ^sum 6 ^carry-borrow 0)
   (<a07> ^digit1 0 ^digit2 7 ^sum 7 ^carry-borrow 0)
   (<a08> ^digit1 0 ^digit2 8 ^sum 8 ^carry-borrow 0)
   (<a09> ^digit1 0 ^digit2 9 ^sum 9 ^carry-borrow 0)
   (<a10> ^digit1 1 ^digit2 0 ^sum 1 ^carry-borrow 0)
   (<a11> ^digit1 1 ^digit2 1 ^sum 2 ^carry-borrow 0)
   (<a12> ^digit1 1 ^digit2 2 ^sum 3 ^carry-borrow 0)
   (<a13> ^digit1 1 ^digit2 3 ^sum 4 ^carry-borrow 0)
   (<a14> ^digit1 1 ^digit2 4 ^sum 5 ^carry-borrow 0)
   (<a15> ^digit1 1 ^digit2 5 ^sum 6 ^carry-borrow 0)
   (<a16> ^digit1 1 ^digit2 6 ^sum 7 ^carry-borrow 0)
   (<a17> ^digit1 1 ^digit2 7 ^sum 8 ^carry-borrow 0)
   (<a18> ^digit1 1 ^digit2 8 ^sum 9 ^carry-borrow 0)
   (<a19> ^digit1 1 ^digit2 9 ^sum 0 ^carry-borrow 1)
   (<a20> ^digit1 2 ^digit2 0 ^sum 2 ^carry-borrow 0)
   (<a21> ^digit1 2 ^digit2 1 ^sum 3 ^carry-borrow 0)
   (<a22> ^digit1 2 ^digit2 2 ^sum 4 ^carry-borrow 0)
   (<a23> ^digit1 2 ^digit2 3 ^sum 5 ^carry-borrow 0)
   (<a24> ^digit1 2 ^digit2 4 ^sum 6 ^carry-borrow 0)
   (<a25> ^digit1 2 ^digit2 5 ^sum 7 ^carry-borrow 0)
   (<a26> ^digit1 2 ^digit2 6 ^sum 8 ^carry-borrow 0)
   (<a27> ^digit1 2 ^digit2 7 ^sum 9 ^carry-borrow 0)
   (<a28> ^digit1 2 ^digit2 8 ^sum 0 ^carry-borrow 1)
   (<a29> ^digit1 2 ^digit2 9 ^sum 1 ^carry-borrow 1)
   (<a30> ^digit1 3 ^digit2 0 ^sum 3 ^carry-borrow 0)
   (<a31> ^digit1 3 ^digit2 1 ^sum 4 ^carry-borrow 0)
   (<a32> ^digit1 3 ^digit2 2 ^sum 5 ^carry-borrow 0)
   (<a33> ^digit1 3 ^digit2 3 ^sum 6 ^carry-borrow 0)
   (<a34> ^digit1 3 ^digit2 4 ^sum 7 ^carry-borrow 0)
   (<a35> ^digit1 3 ^digit2 5 ^sum 8 ^carry-borrow 0)
   (<a36> ^digit1 3 ^digit2 6 ^sum 9 ^carry-borrow 0)
   (<a37> ^digit1 3 ^digit2 7 ^sum 0 ^carry-borrow 1)
   (<a38> ^digit1 3 ^digit2 8 ^sum 1 ^carry-borrow 1)
   (<a39> ^digit1 3 ^digit2 9 ^sum 2 ^carry-borrow 1)
   (<a40> ^digit1 4 ^digit2 0 ^sum 4 ^carry-borrow 0)
   (<a41> ^digit1 4 ^digit2 1 ^sum 5 ^carry-borrow 0)
   (<a42> ^digit1 4 ^digit2 2 ^sum 6 ^carry-borrow 0)
   (<a43> ^digit1 4 ^digit2 3 ^sum 7 ^carry-borrow 0)
   (<a44> ^digit1 4 ^digit2 4 ^sum 8 ^carry-borrow 0)
   (<a45> ^digit1 4 ^digit2 5 ^sum 9 ^carry-borrow 0)
   (<a46> ^digit1 4 ^digit2 6 ^sum 0 ^carry-borrow 1)
   (<a47> ^digit1 4 ^digit2 7 ^sum 1 ^carry-borrow 1)
   (<a48> ^digit1 4 ^digit2 8 ^sum 2 ^carry-borrow 1)
   (<a49> ^digit1 4 ^digit2 9 ^sum 3 ^carry-borrow 1)
   (<a50> ^digit1 5 ^digit2 0 ^sum 5 ^carry-borrow 0)
   (<a51> ^digit1 5 ^digit2 1 ^sum 6 ^carry-borrow 0)
   (<a52> ^digit1 5 ^digit2 2 ^sum 7 ^carry-borrow 0)
   (<a53> ^digit1 5 ^digit2 3 ^sum 8 ^carry-borrow 0)
   (<a54> ^digit1 5 ^digit2 4 ^sum 9 ^carry-borrow 0)
   (<a55> ^digit1 5 ^digit2 5 ^sum 0 ^carry-borrow 1)
   (<a56> ^digit1 5 ^digit2 6 ^sum 1 ^carry-borrow 1)
   (<a57> ^digit1 5 ^digit2 7 ^sum 2 ^carry-borrow 1)
   (<a58> ^digit1 5 ^digit2 8 ^sum 3 ^carry-borrow 1)
   (<a59> ^digit1 5 ^digit2 9 ^sum 4 ^carry-borrow 1)
   (<a60> ^digit1 6 ^digit2 0 ^sum 6 ^carry-borrow 0)
   (<a61> ^digit1 6 ^digit2 1 ^sum 7 ^carry-borrow 0)
   (<a62> ^digit1 6 ^digit2 2 ^sum 8 ^carry-borrow 0)
   (<a63> ^digit1 6 ^digit2 3 ^sum 9 ^carry-borrow 0)
   (<a64> ^digit1 6 ^digit2 4 ^sum 0 ^carry-borrow 1)
   (<a65> ^digit1 6 ^digit2 5 ^sum 1 ^carry-borrow 1)
   (<a66> ^digit1 6 ^digit2 6 ^sum 2 ^carry-borrow 1)
   (<a67> ^digit1 6 ^digit2 7 ^sum 3 ^carry-borrow 1)
   (<a68> ^digit1 6 ^digit2 8 ^sum 4 ^carry-borrow 1)
   (<a69> ^digit1 6 ^digit2 9 ^sum 5 ^carry-borrow 1)
   (<a70> ^digit1 7 ^digit2 0 ^sum 7 ^carry-borrow 0)
   (<a71> ^digit1 7 ^digit2 1 ^sum 8 ^carry-borrow 0)
   (<a72> ^digit1 7 ^digit2 2 ^sum 9 ^carry-borrow 0)
   (<a73> ^digit1 7 ^digit2 3 ^sum 0 ^carry-borrow 1)
   (<a74> ^digit1 7 ^digit2 4 ^sum 1 ^carry-borrow 1)
   (<a75> ^digit1 7 ^digit2 5 ^sum 2 ^carry-borrow 1)
   (<a76> ^digit1 7 ^digit2 6 ^sum 3 ^carry-borrow 1)
   (<a77> ^digit1 7 ^digit2 7 ^sum 4 ^carry-borrow 1)
   (<a78> ^digit1 7 ^digit2 8 ^sum 5 ^carry-borrow 1)
   (<a79> ^digit1 7 ^digit2 9 ^sum 6 ^carry-borrow 1)
   (<a80> ^digit1 8 ^digit2 0 ^sum 8 ^carry-borrow 0)
   (<a81> ^digit1 8 ^digit2 1 ^sum 9 ^carry-borrow 0)
   (<a82> ^digit1 8 ^digit2 2 ^sum 0 ^carry-borrow 1)
   (<a83> ^digit1 8 ^digit2 3 ^sum 1 ^carry-borrow 1)
   (<a84> ^digit1 8 ^digit2 4 ^sum 2 ^carry-borrow 1)
   (<a85> ^digit1 8 ^digit2 5 ^sum 3 ^carry-borrow 1)
   (<a86> ^digit1 8 ^digit2 6 ^sum 4 ^carry-borrow 1)
   (<a87> ^digit1 8 ^digit2 7 ^sum 5 ^carry-borrow 1)
   (<a88> ^digit1 8 ^digit2 8 ^sum 6 ^carry-borrow 1)
   (<a89> ^digit1 8 ^digit2 9 ^sum 7 ^carry-borrow 1)
   (<a90> ^digit1 9 ^digit2 0 ^sum 9 ^carry-borrow 0)
   (<a91> ^digit1 9 ^digit2 1 ^sum 0 ^carry-borrow 1)
   (<a92> ^digit1 9 ^digit2 2 ^sum 1 ^carry-borrow 1)
   (<a93> ^digit1 9 ^digit2 3 ^sum 2 ^carry-borrow 1)
   (<a94> ^digit1 9 ^digit2 4 ^sum 3 ^carry-borrow 1)
   (<a95> ^digit1 9 ^digit2 5 ^sum 4 ^carry-borrow 1)
   (<a96> ^digit1 9 ^digit2 6 ^sum 5 ^carry-borrow 1)
   (<a97> ^digit1 9 ^digit2 7 ^sum 6 ^carry-borrow 1)
   (<a98> ^digit1 9 ^digit2 8 ^sum 7 ^carry-borrow 1)
   (<a99> ^digit1 9 ^digit2 9 ^sum 8 ^carry-borrow 1)
}

smem --add {
   (<arithmetic> ^subtraction-facts
                          <a01> <a02> <a03> <a04> <a05> <a06> <a07> <a08> <a09> <a00>
                          <a11> <a12> <a13> <a14> <a15> <a16> <a17> <a18> <a19> <a10>
                          <a21> <a22> <a23> <a24> <a25> <a26> <a27> <a28> <a29> <a20>
                          <a31> <a32> <a33> <a34> <a35> <a36> <a37> <a38> <a39> <a30>
                          <a41> <a42> <a43> <a44> <a45> <a46> <a47> <a48> <a49> <a40>
                          <a51> <a52> <a53> <a54> <a55> <a56> <a57> <a58> <a59> <a50>
                          <a61> <a62> <a63> <a64> <a65> <a66> <a67> <a68> <a69> <a60>
                          <a71> <a72> <a73> <a74> <a75> <a76> <a77> <a78> <a79> <a70>
                          <a81> <a82> <a83> <a84> <a85> <a86> <a87> <a88> <a89> <a80>
                          <a91> <a92> <a93> <a94> <a95> <a96> <a97> <a98> <a99> <a90>)
   (<a00> ^digit1 0 ^digit2 0 ^result 0)
   (<a01> ^digit1 10 ^digit2 1 ^result 9)
   (<a02> ^digit1 10 ^digit2 2 ^result 8)
   (<a03> ^digit1 10 ^digit2 3 ^result 7)
   (<a04> ^digit1 10 ^digit2 4 ^result 6)
   (<a05> ^digit1 10 ^digit2 5 ^result 5)
   (<a06> ^digit1 10 ^digit2 6 ^result 4)
   (<a07> ^digit1 10 ^digit2 7 ^result 3)
   (<a08> ^digit1 10 ^digit2 8 ^result 2)
   (<a09> ^digit1 10 ^digit2 9 ^result 1)
   (<a10> ^digit1 1 ^digit2 0 ^result 1)
   (<a11> ^digit1 1 ^digit2 1 ^result 0)
   (<a12> ^digit1 11 ^digit2 2 ^result 9)
   (<a13> ^digit1 11 ^digit2 3 ^result 8)
   (<a14> ^digit1 11 ^digit2 4 ^result 7)
   (<a15> ^digit1 11 ^digit2 5 ^result 6)
   (<a16> ^digit1 11 ^digit2 6 ^result 5)
   (<a17> ^digit1 11 ^digit2 7 ^result 4)
   (<a18> ^digit1 11 ^digit2 8 ^result 3)
   (<a19> ^digit1 11 ^digit2 9 ^result 2)
   (<a20> ^digit1 2 ^digit2 0 ^result 2)
   (<a21> ^digit1 2 ^digit2 1 ^result 1)
   (<a22> ^digit1 2 ^digit2 2 ^result 0)
   (<a23> ^digit1 12 ^digit2 3 ^result 9)
   (<a24> ^digit1 12 ^digit2 4 ^result 8)
   (<a25> ^digit1 12 ^digit2 5 ^result 7)
   (<a26> ^digit1 12 ^digit2 6 ^result 6)
   (<a27> ^digit1 12 ^digit2 7 ^result 5)
   (<a28> ^digit1 12 ^digit2 8 ^result 4)
   (<a29> ^digit1 12 ^digit2 9 ^result 3)
   (<a30> ^digit1 3 ^digit2 0 ^result 3)
   (<a31> ^digit1 3 ^digit2 1 ^result 2)
   (<a32> ^digit1 3 ^digit2 2 ^result 1)
   (<a33> ^digit1 3 ^digit2 3 ^result 0)
   (<a34> ^digit1 13 ^digit2 4 ^result 9)
   (<a35> ^digit1 13 ^digit2 5 ^result 8)
   (<a36> ^digit1 13 ^digit2 6 ^result 7)
   (<a37> ^digit1 13 ^digit2 7 ^result 6)
   (<a38> ^digit1 13 ^digit2 8 ^result 5)
   (<a39> ^digit1 13 ^digit2 9 ^result 4)
   (<a40> ^digit1 4 ^digit2 0 ^result 4)
   (<a41> ^digit1 4 ^digit2 1 ^result 3)
   (<a42> ^digit1 4 ^digit2 2 ^result 2)
   (<a43> ^digit1 4 ^digit2 3 ^result 1)
   (<a44> ^digit1 4 ^digit2 4 ^result 0)
   (<a45> ^digit1 14 ^digit2 5 ^result 9)
   (<a46> ^digit1 14 ^digit2 6 ^result 8)
   (<a47> ^digit1 14 ^digit2 7 ^result 7)
   (<a48> ^digit1 14 ^digit2 8 ^result 6)
   (<a49> ^digit1 14 ^digit2 9 ^result 5)
   (<a50> ^digit1 5 ^digit2 0 ^result 5)
   (<a51> ^digit1 5 ^digit2 1 ^result 4)
   (<a52> ^digit1 5 ^digit2 2 ^result 3)
   (<a53> ^digit1 5 ^digit2 3 ^result 2)
   (<a54> ^digit1 5 ^digit2 4 ^result 1)
   (<a55> ^digit1 5 ^digit2 5 ^result 0)
   (<a56> ^digit1 15 ^digit2 6 ^result 9)
   (<a57> ^digit1 15 ^digit2 7 ^result 8)
   (<a58> ^digit1 15 ^digit2 8 ^result 7)
   (<a59> ^digit1 15 ^digit2 9 ^result 6)
   (<a60> ^digit1 6 ^digit2 0 ^result 6)
   (<a61> ^digit1 6 ^digit2 1 ^result 5)
   (<a62> ^digit1 6 ^digit2 2 ^result 4)
   (<a63> ^digit1 6 ^digit2 3 ^result 3)
   (<a64> ^digit1 6 ^digit2 4 ^result 2)
   (<a65> ^digit1 6 ^digit2 5 ^result 1)
   (<a66> ^digit1 6 ^digit2 6 ^result 0)
   (<a67> ^digit1 16 ^digit2 7 ^result 9)
   (<a68> ^digit1 16 ^digit2 8 ^result 8)
   (<a69> ^digit1 16 ^digit2 9 ^result 7)
   (<a70> ^digit1 7 ^digit2 0 ^result 7)
   (<a71> ^digit1 7 ^digit2 1 ^result 6)
   (<a72> ^digit1 7 ^digit2 2 ^result 5)
   (<a73> ^digit1 7 ^digit2 3 ^result 4)
   (<a74> ^digit1 7 ^digit2 4 ^result 3)
   (<a75> ^digit1 7 ^digit2 5 ^result 2)
   (<a76> ^digit1 7 ^digit2 6 ^result 1)
   (<a77> ^digit1 7 ^digit2 7 ^result 0)
   (<a78> ^digit1 17 ^digit2 8 ^result 9)
   (<a79> ^digit1 17 ^digit2 9 ^result 8)
   (<a80> ^digit1 8 ^digit2 0 ^result 8)
   (<a81> ^digit1 8 ^digit2 1 ^result 7)
   (<a82> ^digit1 8 ^digit2 2 ^result 6)
   (<a83> ^digit1 8 ^digit2 3 ^result 5)
   (<a84> ^digit1 8 ^digit2 4 ^result 4)
   (<a85> ^digit1 8 ^digit2 5 ^result 3)
   (<a86> ^digit1 8 ^digit2 6 ^result 2)
   (<a87> ^digit1 8 ^digit2 7 ^result 1)
   (<a88> ^digit1 8 ^digit2 8 ^result 0)
   (<a89> ^digit1 18 ^digit2 9 ^result 9)
   (<a90> ^digit1 9 ^digit2 0 ^result 9)
   (<a91> ^digit1 9 ^digit2 1 ^result 8)
   (<a92> ^digit1 9 ^digit2 2 ^result 7)
   (<a93> ^digit1 9 ^digit2 3 ^result 6)
   (<a94> ^digit1 9 ^digit2 4 ^result 5)
   (<a95> ^digit1 9 ^digit2 5 ^result 4)
   (<a96> ^digit1 9 ^digit2 6 ^result 3)
   (<a97> ^digit1 9 ^digit2 7 ^result 2)
   (<a98> ^digit1 9 ^digit2 8 ^result 1)
   (<a99> ^digit1 9 ^digit2 9 ^result 0)
}

smem --add {
   (<arithmetic> ^add10-facts
                          <a01> <a02> <a03> <a04> <a05> <a06> <a07> <a08> <a09> <a00>)
   (<a00> ^digit1 0 ^digit-10 10)
   (<a01> ^digit1 1 ^digit-10 11)
   (<a02> ^digit1 2 ^digit-10 12)
   (<a03> ^digit1 3 ^digit-10 13)
   (<a04> ^digit1 4 ^digit-10 14)
   (<a05> ^digit1 5 ^digit-10 15)
   (<a06> ^digit1 6 ^digit-10 16)
   (<a07> ^digit1 7 ^digit-10 17)
   (<a08> ^digit1 8 ^digit-10 18)
   (<a09> ^digit1 9 ^digit-10 19)
}
