sp {answerx2*apply*op*OpNoChange*t53-2
    (<b1> ^referent <c1>)
    (<b1> ^value <c2>)
    (<b2> ^referent { <= <c15> <c3> })
    (<b2> ^value <c2>)
    (<b3> ^referent { <= <c14> <c4> })
    (<b3> ^value <c2>)
    (<b4> ^referent { <= <c13> <c5> })
    (<b4> ^value <c2>)
    (<b5> ^referent <c2>)
    (<b5> ^value { <= <c12> <c6> })
    (<b6> ^referent <c2>)
    (<b6> ^value { <= <c11> <c7> })
    (<b7> ^referent { <= <c16> <c2> })
    (<b7> ^value { <= <c10> <c8> })
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^acceptable-test <c4>)
    (<s1> ^acceptable-test <c5>)
    (<s1> ^acceptable-test <c6>)
    (<s1> ^acceptable-test <c7>)
    (<s1> ^acceptable-test <c8>)
    (<s1> ^bindifferent-test <c2>)
    (<s1> ^bindifferent-test <c6>)
    (<s1> ^bindifferent-test <c7>)
    (<s1> ^bindifferent-test <c8>)
    (<s1> ^nindifferent-test <c2>)
    (<s1> ^numbers <c2>)
    (<s1> ^numbers <c3>)
    (<s1> ^numbers <c4>)
    (<s1> ^numbers <c5>)
    (<s1> ^numbers <c6>)
    (<s1> ^numbers <c7>)
    (<s1> ^numbers <c8>)
    (<s1> ^operator <o1>)
    (<t1> ^binary-indifferents <b2>)
    (<t1> ^binary-indifferents <b3>)
    (<t1> ^binary-indifferents <b4>)
    (<t1> ^binary-indifferents <b5>)
    (<t1> ^binary-indifferents <b6>)
    (<t1> ^binary-indifferents <b7>)
    (<t1> ^name <c9>)
    (<t1> ^numerics <b1>)
    (<t1> ^operators <c10>)
    (<t1> ^operators <c11>)
    (<t1> ^operators <c12>)
    (<t1> ^operators <c13>)
    (<t1> ^operators <c14>)
    (<t1> ^operators <c15>)
    (<t1> ^operators <c16>)
    (state <s1> ^superstate nil)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t53-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c16>)
    (<t1> ^operators <c12>)
    (<t1> ^operators <c10>)
    (<t1> ^operators <c8>)
    (<t1> ^operators <c6>)
    (<t1> ^operators <c4>)
    (<t1> ^operators <c2>)
    (<t1> ^name <c15>)
    (<t1> ^binary-indifferents <b6>)
    (<b6> ^referent { <= <c16> <c13> })
    (<b6> ^value { <= <c2> <c1> })
    (<s1> ^numbers <c13>)
    (<s1> ^numbers <c1>)
    (<s1> ^nindifferent-test <c13>)
    (<s1> ^bindifferent-test <c1>)
    (<s1> ^bindifferent-test <c13>)
    (<s1> ^acceptable-test <c13>)
    (<s1> ^acceptable-test <c1>)
    (<t1> ^binary-indifferents <b5>)
    (<b5> ^referent <c13>)
    (<b5> ^value { <= <c4> <c3> })
    (<s1> ^numbers <c3>)
    (<s1> ^bindifferent-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^binary-indifferents <b4>)
    (<b4> ^referent <c13>)
    (<b4> ^value { <= <c6> <c5> })
    (<s1> ^numbers <c5>)
    (<s1> ^bindifferent-test <c5>)
    (<s1> ^acceptable-test <c5>)
    (<t1> ^binary-indifferents <b3>)
    (<b3> ^value <c13>)
    (<b3> ^referent { <= <c8> <c7> })
    (<s1> ^numbers <c7>)
    (<s1> ^acceptable-test <c7>)
    (<t1> ^binary-indifferents <b2>)
    (<b2> ^value <c13>)
    (<b2> ^referent { <= <c10> <c9> })
    (<s1> ^numbers <c9>)
    (<s1> ^acceptable-test <c9>)
    (<t1> ^binary-indifferents <b1>)
    (<b1> ^value <c13>)
    (<b1> ^referent { <= <c12> <c11> })
    (<s1> ^numbers <c11>)
    (<s1> ^acceptable-test <c11>)
    (<t1> ^numerics <b7>)
    (<b7> ^value <c13>)
    (<b7> ^referent <c14>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t47-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c9>)
    (<t1> ^operators <c8>)
    (<t1> ^operators <c7>)
    (<t1> ^operators <c6>)
    (<t1> ^name <c5>)
    (<t1> ^prohibits { <= <c6> <c4> })
    (<s1> ^numbers <c4>)
    (<s1> ^prohibit-test <c4>)
    (<s1> ^acceptable-test <c4>)
    (<t1> ^worsts { <= <c7> <c3> })
    (<s1> ^numbers <c3>)
    (<s1> ^worst-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^worsts { <= <c8> <c2> })
    (<s1> ^numbers <c2>)
    (<s1> ^worst-test <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^numbers { <= <c9> <c1> })
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op5 +)
}

sp {answer*apply*op*OpNoChange*t47-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c9>)
    (<t1> ^operators <c6>)
    (<t1> ^operators <c4>)
    (<t1> ^operators <c2>)
    (<t1> ^name <c7>)
    (<t1> ^prohibits { <= <c2> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^prohibit-test <c1>)
    (<s1> ^acceptable-test <c1>)
    (<t1> ^worsts { <= <c4> <c3> })
    (<s1> ^numbers <c3>)
    (<s1> ^worst-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^worsts { <= <c6> <c5> })
    (<s1> ^numbers <c5>)
    (<s1> ^worst-test <c5>)
    (<s1> ^acceptable-test <c5>)
    (<s1> ^numbers { <= <c9> <c8> })
    (<s1> ^acceptable-test <c8>)
    -->
    (<s1> ^result op5 +)
}

sp {answerx2*apply*op*OpNoChange*t41-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c3>)
    (<t1> ^name <c2>)
    (<s1> ^numbers { <= <c3> <c1> })
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op11 +)
}

sp {answer*apply*op*OpNoChange*t41-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c3>)
    (<t1> ^name <c1>)
    (<s1> ^numbers { <= <c3> <c2> })
    (<s1> ^acceptable-test <c2>)
    -->
    (<s1> ^result op11 +)
}

sp {answerx2*apply*op*OpNoChange*t35-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c5>)
    (<t1> ^operators <c4>)
    (<t1> ^name <c3>)
    (<t1> ^betters <b1>)
    (<b1> ^referent { <= <c4> <c1> })
    (<b1> ^value { <= <c5> <c2> })
    (<t1> ^bests <c2>)
    (<s1> ^numbers <c2>)
    (<s1> ^numbers <c1>)
    (<s1> ^best-test <c2>)
    (<s1> ^better-test <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op2 +)
}

sp {answer*apply*op*OpNoChange*t35-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c5>)
    (<t1> ^operators <c2>)
    (<t1> ^name <c4>)
    (<t1> ^betters <b1>)
    (<b1> ^referent { <= <c2> <c1> })
    (<b1> ^value { <= <c5> <c3> })
    (<t1> ^bests <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^numbers <c1>)
    (<s1> ^best-test <c3>)
    (<s1> ^better-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op2 +)
}

sp {answerx2*apply*op*OpNoChange*t29-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c6>)
    (<t1> ^operators <c5>)
    (<t1> ^name <c4>)
    (<t1> ^binary-indifferents <b2>)
    (<b2> ^referent { <= <c5> <c3> })
    (<b2> ^value { <= <c6> <c2> })
    (<s1> ^numbers <c2>)
    (<s1> ^numbers <c3>)
    (<s1> ^nindifferent-test <c2>)
    (<s1> ^bindifferent-test <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^numerics <b1>)
    (<b1> ^value <c2>)
    (<b1> ^referent <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t29-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c6>)
    (<t1> ^operators <c2>)
    (<t1> ^name <c5>)
    (<t1> ^binary-indifferents <b1>)
    (<b1> ^referent { <= <c2> <c1> })
    (<b1> ^value { <= <c6> <c3> })
    (<s1> ^numbers <c3>)
    (<s1> ^numbers <c1>)
    (<s1> ^nindifferent-test <c3>)
    (<s1> ^bindifferent-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^acceptable-test <c1>)
    (<t1> ^numerics <b2>)
    (<b2> ^value <c3>)
    (<b2> ^referent <c4>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t23-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c3>)
    (<t1> ^name <c2>)
    (<t1> ^requires { <= <c3> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^require-test <c1>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t23-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c3>)
    (<t1> ^name <c2>)
    (<t1> ^requires { <= <c3> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^require-test <c1>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t17-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c7>)
    (<t1> ^operators <c6>)
    (<t1> ^operators <c5>)
    (<s1> ^worse-test { <= <c6> <c3> })
    (<t1> ^name <c4>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^worse <b2>)
    (<b2> ^value <c3>)
    (<b2> ^referent { <= <c7> <c2> })
    (<s1> ^numbers <c2>)
    (<s1> ^better-test <c2>)
    (<s1> ^acceptable-test <c2>)
    (<t1> ^betters <b1>)
    (<b1> ^value <c2>)
    (<b1> ^referent { <= <c5> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t17-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c7>)
    (<t1> ^operators <c4>)
    (<t1> ^operators <c2>)
    (<s1> ^worse-test { <= <c4> <c3> })
    (<t1> ^name <c6>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^worse <b1>)
    (<b1> ^value <c3>)
    (<b1> ^referent { <= <c7> <c5> })
    (<s1> ^numbers <c5>)
    (<s1> ^better-test <c5>)
    (<s1> ^acceptable-test <c5>)
    (<t1> ^betters <b2>)
    (<b2> ^value <c5>)
    (<b2> ^referent { <= <c2> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t11-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c4>)
    (<t1> ^name <c3>)
    (<t1> ^numerics <b1>)
    (<b1> ^referent <c2>)
    (<b1> ^value { <= <c4> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^nindifferent-test <c1>)
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op2 +)
}

sp {answer*apply*op*OpNoChange*t11-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c4>)
    (<t1> ^name <c3>)
    (<t1> ^numerics <b1>)
    (<b1> ^referent <c1>)
    (<b1> ^value { <= <c4> <c2> })
    (<s1> ^numbers <c2>)
    (<s1> ^nindifferent-test <c2>)
    (<s1> ^acceptable-test <c2>)
    -->
    (<s1> ^result op2 +)
}

sp {answerx2*apply*op*OpNoChange*t5-2
    (state <s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c11>)
    (<t1> ^operators <c10>)
    (<t1> ^operators <c9>)
    (<t1> ^operators <c8>)
    (<t1> ^operators <c7>)
    (<t1> ^name <c6>)
    (<t1> ^prohibits { <= <c7> <c5> })
    (<s1> ^numbers <c5>)
    (<s1> ^prohibit-test <c5>)
    (<s1> ^acceptable-test <c5>)
    (<t1> ^prohibits { <= <c8> <c4> })
    (<s1> ^numbers <c4>)
    (<s1> ^prohibit-test <c4>)
    (<s1> ^acceptable-test <c4>)
    (<t1> ^rejects { <= <c9> <c3> })
    (<s1> ^numbers <c3>)
    (<s1> ^reject-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^worsts { <= <c10> <c2> })
    (<s1> ^numbers <c2>)
    (<s1> ^worst-test <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^numbers { <= <c11> <c1> })
    (<s1> ^acceptable-test <c1>)
    -->
    (<s1> ^result op4 +)
}

sp {answer*apply*op*OpNoChange*t5-1
    (state <s2> ^superstate <s1>)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators <c11>)
    (<t1> ^operators <c8>)
    (<t1> ^operators <c6>)
    (<t1> ^operators <c4>)
    (<t1> ^operators <c2>)
    (<t1> ^name <c9>)
    (<t1> ^prohibits { <= <c2> <c1> })
    (<s1> ^numbers <c1>)
    (<s1> ^prohibit-test <c1>)
    (<s1> ^acceptable-test <c1>)
    (<t1> ^prohibits { <= <c4> <c3> })
    (<s1> ^numbers <c3>)
    (<s1> ^prohibit-test <c3>)
    (<s1> ^acceptable-test <c3>)
    (<t1> ^rejects { <= <c6> <c5> })
    (<s1> ^numbers <c5>)
    (<s1> ^reject-test <c5>)
    (<s1> ^acceptable-test <c5>)
    (<t1> ^worsts { <= <c8> <c7> })
    (<s1> ^numbers <c7>)
    (<s1> ^worst-test <c7>)
    (<s1> ^acceptable-test <c7>)
    (<s1> ^numbers { <= <c11> <c10> })
    (<s1> ^acceptable-test <c10>)
    -->
    (<s1> ^result op4 +)
}
