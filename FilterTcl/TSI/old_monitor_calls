
tsiAgentWindow.tcl:153:  # We add a monitor to make sure that long running commands like
tsiAgentWindow.tcl:156:  monitor -add after-decision-cycle update

tsiControlPanelCommon.tcl:365:    sendAllAgents {monitor -add after-decision-phase-cycle "stop-soar -self " dp1}
tsiControlPanelCommon.tcl:369:    sendAllAgents {monitor -delete after-decision-phase-cycle dp1}

tsiDebugger.tcl:558:       monitor -add before-input-phase {Debugger::ChangeCycleIcon 1} debugUpdate
tsiDebugger.tcl:559:       monitor -add before-decision-phase-cycle {Debugger::ChangeCycleIcon 2} debugUpdate
tsiDebugger.tcl:560:       monitor -add before-output-phase {Debugger::ChangeCycleIcon 3} debugUpdate
tsiDebugger.tcl:564:      monitor -delete before-input-phase debugUpdate
tsiDebugger.tcl:565:      monitor -delete before-decision-phase-cycle debugUpdate
tsiDebugger.tcl:566:      monitor -delete before-output-phase debugUpdate

tsiDebuggerMiscPanes.tcl:7: # Set up Soar monitors
tsiDebuggerMiscPanes.tcl:10:   monitor -add after-decision-cycle \
tsiDebuggerMiscPanes.tcl:11:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:16:   monitor -add after-init-soar \
tsiDebuggerMiscPanes.tcl:17:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:33: # Set up Soar monitors
tsiDebuggerMiscPanes.tcl:36:   monitor -add after-decision-cycle \
tsiDebuggerMiscPanes.tcl:37:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:42:   monitor -add after-init-soar \
tsiDebuggerMiscPanes.tcl:43:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:48:   monitor -add after-output-phase \
tsiDebuggerMiscPanes.tcl:49:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:65: # Set up Soar monitors
tsiDebuggerMiscPanes.tcl:68:   monitor -add after-output-phase \
tsiDebuggerMiscPanes.tcl:69:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:74:   monitor -add after-init-soar \
tsiDebuggerMiscPanes.tcl:75:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:80:   monitor -add wm-changes \
tsiDebuggerMiscPanes.tcl:81:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:86:   monitor -add after-decision-cycle \
tsiDebuggerMiscPanes.tcl:87:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:92:   monitor -add production-just-added \
tsiDebuggerMiscPanes.tcl:93:                   [list ShowInMonitor $stackFrame \
tsiDebuggerMiscPanes.tcl:107:proc MiscPanes::DeleteMonitors {} {
tsiDebuggerMiscPanes.tcl:109:   monitor -delete after-output-phase debuggerPane
tsiDebuggerMiscPanes.tcl:110:   monitor -delete after-init-soar debuggerPane
tsiDebuggerMiscPanes.tcl:111:   monitor -delete wm-changes debuggerPane
tsiDebuggerMiscPanes.tcl:112:   monitor -delete after-decision-cycle debuggerPane
tsiDebuggerMiscPanes.tcl:113:   monitor -delete production-just-added debuggerPane
tsiDebuggerMiscPanes.tcl:141:   # We add a monitor to make sure that long running commands like
tsiDebuggerMiscPanes.tcl:143:   monitor -add after-decision-cycle update idleUpdate
tsiDebuggerPaneManager.tcl:54:   # Kill the monitors (state stack, match, prefs)
tsiDebuggerPaneManager.tcl:66:   MiscPanes::DeleteMonitors

tsiInit.tcl:242:   #monitor -add before-init-soar cleanupMonitorWindows

tsiUtils.tcl:93:set opreferencesMonitor(event2) after-init-soar
tsiUtils.tcl:94:set opreferencesMonitor(event3) after-output-phase
tsiUtils.tcl:95:set opreferencesMonitor(length) 3

tsiUtils.tcl:212:# with the Soar monitor MON associated with that window.  It also
tsiUtils.tcl:218:  global matchSet printStack opreferencesMonitor monitorWindowPairs
tsiUtils.tcl:219:  global monitor
tsiUtils.tcl:221:  if {$mon == 0 && [info exists monitorWindowPairs($win)] } {
tsiUtils.tcl:222:      set mon $monitorWindowPairs($win)
tsiUtils.tcl:224:  if {[info exists monitorWindowPairs($win)] } {
tsiUtils.tcl:225:      unset monitorWindowPairs($win)}
tsiUtils.tcl:231:      monitor -delete $matchSet(event$i) $matchSet(id$i)}
tsiUtils.tcl:232:      set monitor(matches) 0
tsiUtils.tcl:236:      set monitor(print-stack) 0
tsiUtils.tcl:237:      monitor -delete $printStack(event$i) $printStack(id$i)}
tsiUtils.tcl:238:  } elseif {[string compare $mon {opreferencesMonitor}] == 0} {
tsiUtils.tcl:239:    set events $opreferencesMonitor(length)
tsiUtils.tcl:241:      set monitor(opreferences) 0
tsiUtils.tcl:242:      monitor -delete $opreferencesMonitor(event$i) $opreferencesMonitor(id$i)}

tsiUtils.tcl:314:    # Add Soar monitors:
tsiUtils.tcl:316:      set matchSet(id$i) [monitor -add $matchSet(event$i) \
tsiUtils.tcl:317:	      [list ShowInMonitor $matchSetFrame {matches}]]}
tsiUtils.tcl:318:    set monitorWindowPairs($matchSetFrame) matchSet
tsiUtils.tcl:322:  ShowInMonitor $matchSetFrame {matches}

tsiUtils.tcl:328:proc makePrintGoalStackMonitor {agentW {x 0} {y 30}} {
tsiUtils.tcl:330:  global monitorWindowPairs tcl_platform
tsiUtils.tcl:335:    mkMonitorWin $printStackFrame printStack
tsiUtils.tcl:342:    # Set up Soar monitors
tsiUtils.tcl:345:          [monitor -add $printStack(event$i) \
tsiUtils.tcl:346:                   [list ShowInMonitor $printStackFrame \
tsiUtils.tcl:354:    set monitorWindowPairs($printStackFrame) printStack
tsiUtils.tcl:357:  ShowInMonitor $printStackFrame {stats -system -dc-count; print -stack}

tsiUtils.tcl:363:proc makeOPreferencesMonitor {agentW {x 0} {y 130}} {
tsiUtils.tcl:364:  global opreferencesMonitor opreferencesFrame
tsiUtils.tcl:365:  global monitorWindowPairs tcl_platform
tsiUtils.tcl:370:    mkMonitorWin $opreferencesFrame opreferencesMonitor 40 10
tsiUtils.tcl:376:    # Set up Soar monitors
tsiUtils.tcl:377:    for {set i 1} {$i <= $opreferencesMonitor(length)} {incr i} {
tsiUtils.tcl:378:      set opreferencesMonitor(id$i) \
tsiUtils.tcl:379:          [monitor -add $opreferencesMonitor(event$i) \
tsiUtils.tcl:380:	      [list ShowInMonitor $opreferencesFrame {preferences}]]}
tsiUtils.tcl:381:    set monitorWindowPairs($opreferencesFrame) opreferencesMonitor

